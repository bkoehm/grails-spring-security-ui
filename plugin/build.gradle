buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
    }
}

version = projectVersion
group = 'org.grails.plugins'

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext.pomInfo = {
    delegate.name "Grails Spring Security UI"
    delegate.description 'The Spring Security UI plugin provides CRUD screens and other user management workflows.'
    delegate.url project.hasProperty('vcsUrl') ? project.vcsUrl : "https://github.com/grails/$project.name"

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if (developers) {
        delegate.developers {
            delegate.developer {
                delegate.id "puneetbehl"
                delegate.name "Puneet Behl"
            }
        }
    }
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    compile "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    compile "org.springframework.security:spring-security-core:$springSecurityVersion", {
        ['spring-aop', 'spring-beans', 'spring-context', 'spring-core', 'spring-expression'].each {
            exclude module: it
        }
    }


}

apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

assets {
    packagePlugin = true
}

task copyGspIntoTemplates {
    ext.inputFolders = ['aclClass',
                            'aclEntry',
                            'aclObjectIdentity',
                            'aclSid',
                            'includes',
                            'layouts',
                            'login',
                            'persistentLogin',
                            'register',
                            'registrationCode',
                            'requestmap',
                            'role',
                            'securityInfo',
                            'user']
    doLast {
        mkdir "${project.projectDir}/src/main/templates/views"
        for ( String folder : inputFolders ) {
            mkdir "${project.projectDir}/src/main/templates/views/${folder}"
        }
        for ( int i = 0; i < inputFolders.size(); i++ ) {
            copy {
                from(fileTree("${project.projectDir}/grails-app/views/${inputFolders[i]}")) {
                    include '*.gsp'
                }
                into "${project.projectDir}/src/main/templates/views/${inputFolders[i]}"
            }
        }
    }
}

task removeGspFromTemplates {
    doLast {
        for ( String folder : copyGspIntoTemplates.inputFolders ) {
            delete "${project.projectDir}/src/main/templates/views/${folder}"
        }
        delete "${project.projectDir}/src/main/templates/views"
    }

}

compileAstJava.dependsOn copyGspIntoTemplates

publishing {
    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                    def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                    username = u
                    password = p
                }
                url "https://repo.grails.org/grails/plugins3-snapshots-local"
            }
        }
    }

    publications {
        maven(MavenPublication) {
            artifactId project.name
            from components.java

            artifact sourcesJar
            artifact javadocJar
            artifact source: "${buildDir}/classes/groovy/main/META-INF/grails-plugin.xml",
                    classifier: "plugin",
                    extension: 'xml'
            pom.withXml {
                def xml = asNode()

                xml.children().last() + pomInfo
                // dependency management shouldn't be included
                def n = xml.get("dependencyManagement")
                if (n)
                    xml.remove(n)
            }

        }
    }
}

signing {
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
